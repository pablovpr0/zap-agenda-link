
import { supabase } from '@/integrations/supabase/client';
import { devLog, devError, devWarn, devInfo } from '@/utils/console';

export const fetchCompanySettings = async (userId: string) => {
  devLog('üîç fetchCompanySettings: Buscando configura√ß√µes para usu√°rio:', userId);
  
  try {
    const { data, error } = await supabase
      .from('company_settings')
      .select('*')
      .eq('company_id', userId)
      .maybeSingle();

    if (error) {
      devError('‚ùå fetchCompanySettings: Erro:', error);
      throw new Error(`Erro ao buscar configura√ß√µes: ${error.message}`);
    }

    devLog('‚úÖ fetchCompanySettings: Configura√ß√µes encontradas:', data);
    return data;
  } catch (error: any) {
    devError('‚ùå fetchCompanySettings: Erro no servi√ßo:', error);
    throw error;
  }
};

export const createDefaultSettings = async (userId: string, companyName: string): Promise<void> => {
  devLog('üöÄ createDefaultSettings: Criando configura√ß√µes padr√£o para:', userId, companyName);
  
  try {
    // Verificar se j√° existem configura√ß√µes
    const existingSettings = await fetchCompanySettings(userId);
    if (existingSettings) {
      devLog('‚ÑπÔ∏è createDefaultSettings: Configura√ß√µes j√° existem, pulando cria√ß√£o');
      return;
    }

    // Gerar slug √∫nico
    const slug = await generateUniqueSlug(companyName);
    devLog('üìù createDefaultSettings: Slug gerado:', slug);
    
    const defaultSettings = {
      company_id: userId,
      slug,
      working_days: [1, 2, 3, 4, 5], // Segunda a Sexta
      working_hours_start: '09:00:00',
      working_hours_end: '18:00:00',
      appointment_interval: 30,
      advance_booking_limit: 30,
      monthly_appointments_limit: 10,
      status_aberto: true,
      lunch_break_enabled: false,
      lunch_start_time: '12:00:00',
      lunch_end_time: '13:00:00'
    };

    const { error } = await supabase
      .from('company_settings')
      .insert(defaultSettings);

    if (error) {
      devError('‚ùå createDefaultSettings: Erro ao inserir:', error);
      throw new Error(`Erro ao criar configura√ß√µes: ${error.message}`);
    }

    devLog('‚úÖ createDefaultSettings: Configura√ß√µes criadas com sucesso');
  } catch (error: any) {
    devError('‚ùå createDefaultSettings: Erro no servi√ßo:', error);
    throw error;
  }
};

export const generateUniqueSlug = async (companyName: string): Promise<string> => {
  try {
    // Criar slug base
    let slug = companyName
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^a-z0-9]/g, '-') // Substitui caracteres especiais por h√≠fen
      .replace(/-+/g, '-') // Remove h√≠fens consecutivos
      .replace(/^-|-$/g, '') // Remove h√≠fens do in√≠cio e fim
      .substring(0, 50); // Limita tamanho

    // Garantir que n√£o est√° vazio
    if (!slug) {
      slug = 'empresa';
    }

    let counter = 0;
    let finalSlug = slug;
    
    // Verificar se o slug j√° existe
    while (await isSlugTaken(finalSlug)) {
      counter++;
      finalSlug = `${slug}-${counter}`;
    }

    return finalSlug;
  } catch (error: any) {
    devError('‚ùå generateUniqueSlug: Erro:', error);
    // Retornar slug de fallback em caso de erro
    return `empresa-${Date.now()}`;
  }
};

export const isSlugTaken = async (slug: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('company_settings')
      .select('slug')
      .eq('slug', slug)
      .maybeSingle();

    if (error) {
      devError('‚ö†Ô∏è isSlugTaken: Erro ao verificar slug:', error);
      return false; // Assumir dispon√≠vel se houver erro
    }

    return data !== null;
  } catch (error: any) {
    devError('‚ùå isSlugTaken: Erro no servi√ßo:', error);
    return false; // Assumir dispon√≠vel se houver erro
  }
};

export const updateCompanySlug = async (userId: string, newSlug: string): Promise<boolean> => {
  try {
    // Validar slug
    const validation = validateSlug(newSlug);
    if (!validation.isValid) {
      throw new Error(validation.error);
    }

    // Verificar se j√° est√° em uso
    if (await isSlugTaken(newSlug)) {
      throw new Error('Este slug j√° est√° em uso por outra empresa');
    }

    const { error } = await supabase
      .from('company_settings')
      .update({ slug: newSlug })
      .eq('company_id', userId);

    if (error) {
      devError('‚ùå updateCompanySlug: Erro ao atualizar:', error);
      throw new Error(`Erro ao atualizar slug: ${error.message}`);
    }

    devLog('‚úÖ updateCompanySlug: Slug atualizado com sucesso');
    return true;
  } catch (error: any) {
    devError('‚ùå updateCompanySlug: Erro no servi√ßo:', error);
    throw error;
  }
};

export const validateSlug = (slug: string): { isValid: boolean; error?: string } => {
  if (!slug || slug.length < 3) {
    return { isValid: false, error: 'Slug deve ter pelo menos 3 caracteres' };
  }

  if (slug.length > 50) {
    return { isValid: false, error: 'Slug deve ter no m√°ximo 50 caracteres' };
  }

  if (!/^[a-z0-9-]+$/.test(slug)) {
    return { isValid: false, error: 'Slug pode conter apenas letras min√∫sculas, n√∫meros e h√≠fens' };
  }

  if (slug.startsWith('-') || slug.endsWith('-')) {
    return { isValid: false, error: 'Slug n√£o pode come√ßar ou terminar com h√≠fen' };
  }

  if (slug.includes('--')) {
    return { isValid: false, error: 'Slug n√£o pode conter h√≠fens consecutivos' };
  }

  const reservedWords = ['admin', 'api', 'www', 'mail', 'ftp', 'localhost', 'root', 'support', 'help'];
  if (reservedWords.includes(slug)) {
    return { isValid: false, error: 'Este slug √© uma palavra reservada' };
  }

  return { isValid: true };
};

// Interfaces para tipagem
export interface CompanySettingsUpdate {
  working_days?: number[];
  working_hours_start?: string;
  working_hours_end?: string;
  appointment_interval?: number;
  advance_booking_limit?: number;
  monthly_appointments_limit?: number;
  lunch_break_enabled?: boolean;
  lunch_start_time?: string;
  lunch_end_time?: string;
  phone?: string;
  address?: string;
  instagram_url?: string;
  welcome_message?: string;
  theme_color?: string;
  selected_theme_id?: string;
}

export interface ProfileUpdate {
  company_name?: string;
  business_type?: string;
  profile_image_url?: string;
}

// Fun√ß√£o para atualizar configura√ß√µes da empresa
export const updateCompanySettings = async (
  userId: string, 
  settings: CompanySettingsUpdate
): Promise<void> => {
  devLog('üîÑ updateCompanySettings: Atualizando configura√ß√µes para usu√°rio:', userId);
  devLog('üìù updateCompanySettings: Dados:', settings);
  
  try {
    const { error } = await supabase
      .from('company_settings')
      .update({
        ...settings,
        updated_at: new Date().toISOString()
      })
      .eq('company_id', userId);

    if (error) {
      devError('‚ùå updateCompanySettings: Erro ao atualizar:', error);
      throw new Error(`Erro ao atualizar configura√ß√µes: ${error.message}`);
    }

    devLog('‚úÖ updateCompanySettings: Configura√ß√µes atualizadas com sucesso');
  } catch (error: any) {
    devError('‚ùå updateCompanySettings: Erro no servi√ßo:', error);
    throw error;
  }
};

// Fun√ß√£o para atualizar perfil da empresa
export const updateCompanyProfile = async (
  userId: string, 
  profile: ProfileUpdate
): Promise<void> => {
  devLog('üîÑ updateCompanyProfile: Atualizando perfil para usu√°rio:', userId);
  devLog('üìù updateCompanyProfile: Dados:', profile);
  
  try {
    const { error } = await supabase
      .from('profiles')
      .update({
        ...profile,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (error) {
      devError('‚ùå updateCompanyProfile: Erro ao atualizar:', error);
      throw new Error(`Erro ao atualizar perfil: ${error.message}`);
    }

    devLog('‚úÖ updateCompanyProfile: Perfil atualizado com sucesso');
  } catch (error: any) {
    devError('‚ùå updateCompanyProfile: Erro no servi√ßo:', error);
    throw error;
  }
};

// Fun√ß√£o para buscar perfil da empresa
export const fetchCompanyProfile = async (userId: string) => {
  devLog('üîç fetchCompanyProfile: Buscando perfil para usu√°rio:', userId);
  
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .maybeSingle();

    if (error) {
      devError('‚ùå fetchCompanyProfile: Erro:', error);
      throw new Error(`Erro ao buscar perfil: ${error.message}`);
    }

    devLog('‚úÖ fetchCompanyProfile: Perfil encontrado:', data);
    return data;
  } catch (error: any) {
    devError('‚ùå fetchCompanyProfile: Erro no servi√ßo:', error);
    throw error;
  }
};

// Fun√ß√£o para salvar todas as configura√ß√µes de uma vez
export const saveAllSettings = async (
  userId: string,
  settings: CompanySettingsUpdate,
  profile: ProfileUpdate
): Promise<void> => {
  devLog('üíæ saveAllSettings: Salvando todas as configura√ß√µes para usu√°rio:', userId);
  
  try {
    // Atualizar configura√ß√µes e perfil em paralelo
    await Promise.all([
      updateCompanySettings(userId, settings),
      updateCompanyProfile(userId, profile)
    ]);

    devLog('‚úÖ saveAllSettings: Todas as configura√ß√µes salvas com sucesso');
  } catch (error: any) {
    devError('‚ùå saveAllSettings: Erro ao salvar:', error);
    throw error;
  }
};
